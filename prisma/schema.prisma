generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model responses {
  response_id           String    @id @db.Uuid
  coach_id              String?   @db.Uuid
  athlete_id            String?   @db.Uuid
  bias_id               String?   @db.Uuid
  likelihood_to_recruit Int
  athlete               athletes? @relation(fields: [athlete_id], references: [athlete_id], onDelete: NoAction, onUpdate: NoAction, map: "response_athlete_id")
  bias                  biases?   @relation(fields: [bias_id], references: [bias_id], onDelete: NoAction, onUpdate: NoAction, map: "response_bias_id")
  coach                 coaches?  @relation(fields: [coach_id], references: [coach_id], onDelete: NoAction, onUpdate: NoAction, map: "response_coach_id")
}

model coaches {
  first_name        String?               @db.VarChar(250)
  coach_id          String                @id @db.Uuid
  email             String?               @unique @db.VarChar(100)
  last_name         String?               @db.VarChar(250)
  date_of_birth     DateTime?             @db.Date
  gender_identity   String?               @db.VarChar(100)
  education_level   String?               @db.VarChar(100)
  sport_id          String?               @db.Uuid
  has_consented     Boolean?
  access_code       String?               @db.VarChar(10)
  city_of_birth     String?               @db.VarChar(150)
  city_of_residence String?               @db.VarChar(150)
  hard_work_pref    Int?
  natural_pref      Int?
  sport             sports?               @relation(fields: [sport_id], references: [sport_id], onDelete: NoAction, onUpdate: NoAction, map: "coach_sport_id")
  preferences       coaches_preferences[]
  responses         responses[]
}

model athletes {
  athlete_id      String      @id @db.Uuid
  email           String?     @unique @db.VarChar(100)
  first_name      String?     @db.VarChar(250)
  last_name       String?     @db.VarChar(250)
  date_of_birth   DateTime?   @db.Date
  gender_identity String?     @db.VarChar(100)
  education_level String?     @db.VarChar(100)
  has_consented   Boolean?
  sport_id        String?     @db.Uuid
  sport           sports?     @relation(fields: [sport_id], references: [sport_id], onDelete: NoAction, onUpdate: NoAction, map: "athlete_sport_id")
  responses       responses[]
}

model sports {
  sport_id    String               @id @db.Uuid
  name        String?              @db.VarChar(250)
  athletes    athletes[]
  coaches     coaches[]
  biases      sports_biases[]
  preferences sports_preferences[]
}

model preferences {
  preference_id String                @id @db.Uuid
  name          String?               @db.VarChar(250)
  coaches       coaches_preferences[]
  sports        sports_preferences[]
}

model biases {
  bias_id   String          @id @db.Uuid
  name      String?         @db.VarChar(250)
  responses responses[]
  sports    sports_biases[]
}

model coaches_preferences {
  coaches_preferences_id String      @id @db.Uuid
  coach_id               String      @db.Uuid
  preference_id          String      @db.Uuid
  coach                  coaches     @relation(fields: [coach_id], references: [coach_id])
  preference             preferences @relation(fields: [preference_id], references: [preference_id])
}

model sports_preferences {
  sports_preferences_id String      @id @db.Uuid
  sport_id              String      @db.Uuid
  preference_id         String      @db.Uuid
  preference            preferences @relation(fields: [preference_id], references: [preference_id])
  sport                 sports      @relation(fields: [sport_id], references: [sport_id])
}

model sports_biases {
  sports_biases_id String @id @db.Uuid
  sport_id         String @db.Uuid
  bias_id          String @db.Uuid
  bias             biases @relation(fields: [bias_id], references: [bias_id])
  sport            sports @relation(fields: [sport_id], references: [sport_id])
}

model users {
  user_id  String @id @db.Uuid
  email    String @db.VarChar(250)
  password String @db.VarChar(500)
}

model tokens {
  token_id    String    @id @db.Uuid
  token       String    @db.VarChar(500)
  expiry_date DateTime? @db.Date
  parent_id   String    @db.Uuid
  user_id     String    @db.Uuid
}

model rugby_athletes {
  position                String?   @db.VarChar(100)
  test_date               DateTime? @db.Date
  date_of_birth           DateTime? @db.Date
  height                  Decimal?  @db.Decimal
  sitting_height          Decimal?  @db.Decimal
  weight                  Decimal?  @db.Decimal
  age                     Decimal?  @db.Decimal
  leg_length              Decimal?  @db.Decimal
  years_fromphv           Decimal?  @db.Decimal
  age_at_phv              Decimal?  @db.Decimal
  vertical_jump           Decimal?  @db.Decimal
  mid_thigh_pull          Decimal?  @db.Decimal
  relative_mid_thigh_pull Decimal?  @db.Decimal
  ten_meter               Decimal?  @db.Decimal
  five_o_five_left        Decimal?  @db.Decimal
  five_o_five_right       Decimal?  @db.Decimal
  aggregate_five_o_five   Decimal?  @db.Decimal
  rugby_athlete_id        BigInt    @id @default(autoincrement())
}
